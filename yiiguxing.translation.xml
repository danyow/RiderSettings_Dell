<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="596" />
    <option name="newTranslationDialogX" value="1654" />
    <option name="newTranslationDialogY" value="627" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="Current Music Progress" />
      <item value="immediate Mode" />
      <item value="第二" />
      <item value="        Tweaks on class modifiers" />
      <item value=" Create an array of clones as putting a clone on each triangle." />
      <item value="Initialize the default entity table." />
      <item value="Cleanup Default Entity Table" />
      <item value="Select Random Default Entity" />
      <item value="Normalize Default Entity Weights" />
      <item value="variant" />
      <item value="Default Entity Entry" />
      <item value="  This table is used to create particle entities with a weighted&#10;         random distribution of particle types. It stores selection weights&#10;         and default entities that allows creating entities with instancing.&#10;" />
      <item value="Default entity table" />
      <item value="Get Weight" />
      <item value=" We want this renderer object disposed at the end of world." />
      <item value="Returns native RenderBuffer. Be warned this is not native Texture, but rather pointer to unity struct that can be used with native unity API. Currently such API exists only on iOS." />
      <item value="A NativeArray exposes a buffer of native memory to managed code, making it possible to share data between managed and native without marshalling costs." />
      <item value="Pointer to an underlying graphics API texture resource.&lt;" />
      <item value="Reset the triangle counter for the next frame." />
      <item value="Set the initial data." />
      <item value="Destroy the temporary objects." />
      <item value="Create an array of clones as putting a clone on each triangle." />
      <item value="Create the default entities." />
      <item value=" We want to do entity instantiation in parallel with the jobs,&#10;             so let the jobs kick in immediately." />
      <item value="Create a renderer for this group." />
      <item value="Calculate the initial data with parallel-for jobs." />
      <item value="         We use parallel-for jobs to calculate the initial data for the&#10;         components in the instanced entities. The primary motivation of this&#10;         is to optimize the vector math operations with Burst -- We don't&#10;         expect that parallelism gives a big performance boost." />
      <item value="Jobified initializer" />
      <item value="Loop 3: Iterate over the vertices in the template mesh." />
      <item value="Loop 2: Iterate over the instance entities." />
      <item value="Loop 1: Iterate over the unique instance data entries." />
      <item value="            &#10;             There are three levels of loops in this system:&#10;            &#10;             Loop 1: Through the array of unique instance settings. We'll get&#10;             an array of entities that share the same instance setting.&#10;            &#10;             Loop 2: Through the array of entities got in Loop 1.&#10;            &#10;             Loop 3: Through the array of vertices in the template mesh given&#10;             via the instance setting.&#10;            " />
      <item value="Clear the unused part of the vertex buffer." />
      <item value="Accessor to the scene transforms" />
      <item value="Update the vertexnormal array via the managed buffers." />
      <item value="Clear the rest of the managed vertex buffer." />
      <item value="Copy the vertexnormal data into the managed buffers." />
      <item value=" NOTE: This is a per project ifdfef,&#10;       the samples in this project are run in both modes for testing purposes.&#10;       In a normal game project this ifdef is not required." />
      <item value="Update Before" />
      <item value="Method to calculate the preferred width and height of the text object." />
      <item value="Reset dirty states as we always want to recalculate preferred values when this function is called." />
      <item value="Function to Calculate the Preferred Width and Height of the text object." />
      <item value="Function used for preprocessing of text" />
      <item value="角落" />
      <item value="_bluetooth Mode" />
      <item value="Get Preferred Values" />
      <item value="With Structural Changes" />
      <item value="With Dispose On Completion" />
      <item value="Amplitude" />
      <item value="amplitude" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="293" />
        <entry key="ENGLISH" value="294" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1661559889797" />
  </component>
  <component name="Settings">
    <option name="autoPlayTTS" value="true" />
    <option name="keepFormat" value="true" />
    <option name="phoneticFontFamily" value="Sarasa Mono SC" />
    <option name="primaryFontFamily" value="Sarasa Mono SC" />
    <option name="showReplacementActionInContextMenu" value="true" />
  </component>
</application>